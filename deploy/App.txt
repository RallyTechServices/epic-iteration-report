<!DOCTYPE html>
<html>
<head>
    <title>Epic Iteration Report</title>
    <!--  (c) 2016 CA Technologies.  All Rights Reserved. -->
    <!--  Build Date: Sun Aug 21 2016 20:59:48 GMT-0700 (PDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Sun Aug 21 2016 20:59:48 GMT-0700 (PDT)";
        var BUILDER = "jmartin";
        var CHECKSUM = 69113387683;
    </script>
    
    <script type="text/javascript" src="/apps/2.1/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350,
    
    informationalConfig: null,
    
    items: [{xtype:'container', itemId:'information' }],
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/var BUILDER = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
       
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
   
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    var stored_checksum = me._generateChecksum(text);
                    if ( CHECKSUM !== stored_checksum ) {
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    _addToContainer: function(container){
        var config = Ext.apply({
            xtype:'container',
            height: 200,
            overflowY: true
        }, this.informationalConfig);
        
        container.add(config);
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if ( !Ext.isEmpty( this.informationalConfig ) ) {
            var container = this.down('#information');
            this._addToContainer(container);
            
        }
        
        if (! app.isExternal() ) {
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            dock: 'bottom',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml,
                doc: 'top'
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            dock:'bottom',
            html:"This app was created by the CA AC Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html: Ext.String.format("Build date/time: {0} ({1})",
                    APP_BUILD_DATE,
                    BUILDER)
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('recordHolder',{
    data: {},
    constructor: function(config) {
        Ext.apply(this, config);
    },
    
    get: function(field) {
        return this.data[field];
    }
});

Ext.define('Rally.technicalservices.FileUtilities', {
    singleton: true,
    logger: new Rally.technicalservices.Logger(),
    
    saveCSVToFile:function(csv,file_name,type_object){
        if (type_object === undefined){
            type_object = {type:'text/csv;charset=utf-8'};
        }
        this.saveAs(csv,file_name, type_object);
    },
    
    saveAs: function(textToWrite, fileName)
    {
        this.logger.log('saveAs:', fileName);
        
        if (Ext.isIE9m){
            Rally.ui.notify.Notifier.showWarning({message: "Export is not supported for IE9 and below."});
            return;
        }

        var textFileAsBlob = null;
        try {
            textFileAsBlob = new Blob([textToWrite], {type:'text/plain'});
        }
        catch(e){
            this.logger.log('Caught an error ', e);
            
            window.BlobBuilder = window.BlobBuilder ||
                        window.WebKitBlobBuilder ||
                    window.MozBlobBuilder ||
                    window.MSBlobBuilder;
            if (window.BlobBuilder ) { //&&  e.name === 'TypeError'){
                bb = new BlobBuilder();
                bb.append([textToWrite]);
                textFileAsBlob = bb.getBlob("text/plain");
            }

        }

        if (!textFileAsBlob){
            Rally.ui.notify.Notifier.showWarning({message: "Export is not supported for this browser."});
            return;
        }

        var fileNameToSaveAs = fileName;

        if (Ext.isIE10p){
            window.navigator.msSaveOrOpenBlob(textFileAsBlob,fileNameToSaveAs); // Now the user will have the option of clicking the Save button and the Open button.
            return;
        }

        var url = this.createObjectURL(textFileAsBlob);

        if (url){
            var downloadLink = document.createElement("a");
            if ("download" in downloadLink){
                downloadLink.download = fileNameToSaveAs;
            } else {
                //Open the file in a new tab
                downloadLink.target = "_blank";
            }

            downloadLink.innerHTML = "Download File";
            downloadLink.href = url;
            if (!Ext.isChrome){
                // Firefox requires the link to be added to the DOM
                // before it can be clicked.
                downloadLink.onclick = this.destroyClickedElement;
                downloadLink.style.display = "none";
                document.body.appendChild(downloadLink);
            }
            downloadLink.click();
        } else {
            Rally.ui.notify.Notifier.showError({message: "Export is not supported "});
        }

    },
    createObjectURL: function ( file ) {
        if ( window.webkitURL ) {
            return window.webkitURL.createObjectURL( file );
        } else if ( window.URL && window.URL.createObjectURL ) {
            return window.URL.createObjectURL( file );
        } else {
            return null;
        }
    },
    saveTextAsFile: function(textToWrite, fileName) {
        var textFileAsBlob = new Blob([textToWrite], {type:'text/plain'});
        var fileNameToSaveAs = fileName;

        var downloadLink = document.createElement("a");
        downloadLink.download = fileNameToSaveAs;
        downloadLink.innerHTML = "Download File";
        if (window.webkitURL != null)
        {
            // Chrome allows the link to be clicked
            // without actually adding it to the DOM.
            downloadLink.href = window.webkitURL.createObjectURL(textFileAsBlob);
        }
        else
        {
            // Firefox requires the link to be added to the DOM
            // before it can be clicked.
            downloadLink.href = window.URL.createObjectURL(textFileAsBlob);
            downloadLink.onclick = destroyClickedElement;
            downloadLink.style.display = "none";
            document.body.appendChild(downloadLink);
        }
        downloadLink.click();
    },
    destroyClickedElement: function(event)
    {
        document.body.removeChild(event.target);
    },
    convertDataArrayToCSVText: function(data_array, requestedFieldHash){
       
        var text = '';
        Ext.each(Object.keys(requestedFieldHash), function(key){
            text += requestedFieldHash[key] + ',';
        });
        text = text.replace(/,$/,'\n');
        
        Ext.each(data_array, function(d){
            Ext.each(Object.keys(requestedFieldHash), function(key){
                if (d[key]){
                    if (typeof d[key] === 'object'){
                        if (d[key].FormattedID) {
                            text += Ext.String.format("\"{0}\",",d[key].FormattedID ); 
                        } else if (d[key].Name) {
                            text += Ext.String.format("\"{0}\",",d[key].Name );                    
                        } else if (!isNaN(Date.parse(d[key]))){
                            text += Ext.String.format("\"{0}\",",Rally.util.DateTime.formatWithDefaultDateTime(d[key]));
                        }else {
                            text += Ext.String.format("\"{0}\",",d[key].toString());
                        }
                    } else {
                        text += Ext.String.format("\"{0}\",",d[key] );                    
                    }
                } else {
                    text += ',';
                }
            },this);
            text = text.replace(/,$/,'\n');
        },this);
        return text;
    },
    _getCSVFromWsapiBackedGrid: function(grid,skip_headers) {
        var deferred = Ext.create('Deft.Deferred');
        var store = Ext.create('Rally.data.wsapi.Store',{
            fetch: grid.getStore().config.fetch,
            filters: grid.getStore().config.filters,
            model: grid.getStore().config.model,
            pageSize: 200
        });
        
        var columns = grid.columns;
        
        var record_count = grid.getStore().getTotalCount(),
            page_size = grid.getStore().pageSize,
            pages = Math.ceil(record_count/page_size),
            promises = [];

        for (var page = 1; page <= pages; page ++ ) {
            promises.push(this.loadStorePage(grid, store, columns, page, pages));
        }
        Deft.Promise.all(promises).then({
            success: function(csvs){
                var csv = [];
                if ( !skip_headers ) {
                    csv.push('"' + this._getHeadersFromGrid(grid).join('","') + '"');
                }
                _.each(csvs, function(c){
                    _.each(c, function(line){
                        csv.push(line);
                    });
                });
                csv = csv.join('\r\n');
                deferred.resolve(csv);
                Rally.getApp().setLoading(false);
            }
        });
        return deferred.promise;
    },
    
    getCSVFromRows: function(scope, grid, rows) {
        var me = this;
        var columns = grid.columns;
        var store = grid.getStore();
        
        console.log('getCSVFromRows');
        
        var model = grid.model;

        var csv = [];
        
        csv.push('"' + this._getHeadersFromGrid(grid).join('","') + '"');
        
        Ext.Array.each(rows,function(row){
            
            csv.push( me._getCSVFromRecord(Ext.create('recordHolder', { data:row}), grid, store) );
        });
        
        csv = csv.join('\r\n');
        return csv;
    },
    
    // custom grid assumes there store is fully loaded
    _getCSVFromCustomBackedGrid: function(grid, skip_headers) {
        var deferred = Ext.create('Deft.Deferred');
        var store = Ext.clone( grid.getStore() );
        var columns = grid.columns;
        Rally.getApp().setLoading("Generating CSV...");
        
        var record_count = store.getTotalCount(),
            page_size = store.pageSize,
            pages = Math.ceil(record_count/page_size),
            promises = [];

        for (var page = 1; page <= pages; page ++ ) {
            promises.push(this.loadStorePage(grid, store, columns, page, pages));
        }
        
        Deft.Promise.all(promises).then({
            scope: this,
            success: function(csvs){
                var csv = [];
                if ( !skip_headers ) {
                    csv.push('"' + this._getHeadersFromGrid(grid).join('","') + '"');
                }
                _.each(csvs, function(c){
                    _.each(c, function(line){
                        csv.push(line);
                    });
                });
                csv = csv.join('\r\n');
                deferred.resolve(csv);
                Rally.getApp().setLoading(false);
            }
        });
        return deferred.promise;
    },
    
    _getHeadersFromGrid: function(grid) {
        var headers = [];        
        var columns = grid.columns;

        Ext.Array.each(columns,function(column){
            if ( column.hidden ) { return; }
            
            if ( column.dataIndex || column.renderer ) {
                if ( column.csvText ) {
                    headers.push(column.csvText.replace('&nbsp;',' '));
                } else if ( column.text )  {
                    headers.push(column.text.replace('&nbsp;',' '));
                }
            }
        });
        
        return headers;
    },
    
    _getColumnNamesFromGrid: function(grid) {
        var names = [];
        var columns = grid.columns;

        Ext.Array.each(columns,function(column){
            if ( column.dataIndex || column.renderer ) {
                names.push(column.dataIndex);
            }
        });
        
        return names;
    },
    /*
     * will render using your grid renderer.  If you want it to ignore the grid renderer, 
     * have the column set _csvIgnoreRender: true
     */
    getCSVFromGrid:function(app, grid, skip_headers){
        this.logger.log("Exporting grid with store type:", Ext.getClassName(grid.getStore()));
        
        if ( Ext.getClassName(grid.getStore()) != "Rally.data.custom.Store" ) {
            return this._getCSVFromWsapiBackedGrid(grid,skip_headers);
        }
        
        return this._getCSVFromCustomBackedGrid(grid,skip_headers);
    },
    loadStorePage: function(grid, store, columns, page, total_pages){
        var deferred = Ext.create('Deft.Deferred');
        this.logger.log('loadStorePage',page, total_pages);

        store.loadPage(page, {
            callback: function (records) {
                var csv = [];
                Rally.getApp().setLoading(Ext.String.format('Page {0} of {1} loaded',page, total_pages));
                for (var i = 0; i < records.length; i++) {
                    var record = records[i];
                    csv.push( this._getCSVFromRecord(record, grid, store) );
                }
                deferred.resolve(csv);
            },
            scope: this
        });
        return deferred;
    },
    
    _getCSVFromRecord: function(record, grid, store) {
        //console.log('record:', record);
        
        var mock_meta_data = {
            align: "right",
            classes: [],
            cellIndex: 9,
            column: null,
            columnIndex: 9,
            innerCls: undefined,
            recordIndex: 5,
            rowIndex: 5,
            style: "",
            tdAttr: "",
            tdCls: "x-grid-cell x-grid-td x-grid-cell-headerId-gridcolumn-1029 x-grid-cell-last x-unselectable",
            unselectableAttr: "unselectable='on'"
        };
        
        var node_values = [];
        var columns = grid.columns;
        
        Ext.Array.each(columns, function (column) {
            if (column.xtype == 'rallyrowactioncolumn'  || column.xtype == 'tsrowactioncolumn') {
                return;
            }
            
            if ( column.hidden ) {
                return;
            }
            
            if (column.dataIndex) {
                var column_name = column.dataIndex;
                
                var display_value = record.get(column_name);

                if (!column._csvIgnoreRender && ( column.renderer || column.exportRenderer) ) {
                    if (column.exportRenderer) {
                        display_value = column.exportRenderer(display_value, mock_meta_data, record, 0, 0, store, grid.getView());
                    } else {
                        display_value = column.renderer(display_value, mock_meta_data, record, 0, 0, store, grid.getView());
                    }
                }
                node_values.push(display_value);
            } else {
                var display_value = null;
                if (!column._csvIgnoreRender && column.renderer) {
                    if (column.exportRenderer) {
                        display_value = column.exportRenderer(display_value, mock_meta_data, record, record, 0, 0, store, grid.getView());
                    } else {
                        display_value = column.renderer(display_value, mock_meta_data, record, record, 0, 0, store, grid.getView());
                    }
                    node_values.push(display_value);
                }
            }
        }, this);
        
        var csv_string = "";
        Ext.Array.each(node_values, function(node_value,idx){
            if ( idx > 0 ) {
                csv_string = csv_string + ",";
            }
            if (/^=/.test(node_value) ) {
                csv_string = csv_string + node_value;
            } else {
                csv_string = csv_string + '"' + node_value + '"';
            }

        });
        
        return csv_string;
    }

});
/*
 * 
 * 
 * PLEASE don't modify this, work on the one here:
 * https://github.com/RallyTechServices/broadcasting-project-picker-apps
 * 
 * 
 * 
 * 
 * 
 */


Ext.define('CA.technicalservices.ProjectPickerDialog',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsprojectpickerdialog',
    
    width: 400,
    closable: true,
    
    selectedRecords: [],
    
    config: {
        /**
         * @cfg {String}
         * Title to give to the dialog
         */
        title: 'Choose Project',

        selectionButtonText: 'Add'
        
    },
    
    items: [{
        xtype: 'panel',
        border: false,
        items: [{
            xtype:'container', 
            itemId:'selector_container',
            height: 200
        }]
    }],

    constructor: function(config) {
        this.mergeConfig(config);

        this.callParent([this.config]);
    },

    initComponent: function() {
        this.callParent(arguments);
        this.addEvents(
            /**
             * @event projectchosen
             * Fires when user clicks done after choosing project
             * @param {CA.technicalservices.ProjectPickerDialog} this dialog
             * @param [{Object}] projects (project.getData, not the model)
             */
            'projectschosen'
        );
        
        this._buildButtons();
        this._buildDisplayBar();
        this._updateDisplay();
        
        this._buildProjectGrid();
        //this._buildTree();
    },
    
    _buildDisplayBar: function() {
        this.down('panel').addDocked({
            xtype:'container',
            dock: 'top',
            padding: '0 0 10 0',
            layout: 'hbox',
            items: [{
                xtype:'container',
                itemId: 'displayBox', 
                height: 50,
                autoScroll: true
            }]
        });
    },
    
    getDisplayTemplate: function() {
        return new Ext.XTemplate(
            '<tpl for=".">',
                '<span class="project-box" id="s{ObjectID}">{Name}</span>',
            '</tpl>'
        );
    },
    
    _updateDisplay: function() {
        var container = this.down('#displayBox');
        container.removeAll();
        
        var sorted_array = Ext.Array.sort(this.selectedRecords, function(a,b) {
            if ( a.Name < b.Name ) { return -1; }
            if ( a.Name > b.Name ) { return 1; }
            return 0;
        });
        
        Ext.Array.each(sorted_array, function(record,idx){
            container.add({
                xtype:'button',
                cls: 'project-button',
                text: "<span class='icon-delete'></span> " + record.Name,
                listeners: {
                    scope: this, 
                    click: function() {
                        this._removeItem(record);
                    }
                }
            });
        },this);
    },
    
    _removeItem: function(item) {
        this.selectedRecords = Ext.Array.remove(this.selectedRecords, item);
        this._updateDisplay();
    },
    
    _buildButtons: function() {
        this.down('panel').addDocked({
            xtype: 'toolbar',
            dock: 'bottom',
            padding: '0 0 10 0',
            layout: {
                type: 'hbox',
                pack: 'center'
            },
            ui: 'footer',
            items: [
                {
                    xtype: 'rallybutton',
                    text: this.selectionButtonText,
                    cls: 'primary small',
                    scope: this,
                    userAction: 'clicked done in dialog',
                    handler: function() {
                        this.fireEvent('projectschosen', this, this.selectedRecords);
                        this.close();
                    }
                },
                {
                    xtype: 'rallybutton',
                    text: 'Cancel',
                    cls: 'secondary small',
                    handler: this.close,
                    scope: this,
                    ui: 'link'
                }
            ]
        });
    },
    
    _addRecordToSelectedRecords: function(record) {
        if ( Ext.isFunction(record.getData ) ) {
            record = record.getData();
        }
        
        // unique by objectID
        var record_hash = {};
        Ext.Array.each( Ext.Array.push(this.selectedRecords, [record] ), function(item) {
            record_hash[item.ObjectID] = item;
        });
        
        this.selectedRecords = Ext.Object.getValues(record_hash);
        this._updateDisplay();
    },
    
    _buildProjectGrid: function() {
        this.selector = this.down('#selector_container').add({
            xtype:'rallytextfield',
            itemId:'searchTerms',
            emptyText: 'Type & Enter to Search Name',
            enableKeyEvents: true,
            flex: 1,
            width: '100%',
            listeners: {
                scope: this,
                keyup: function(field,evt){
                    if ( evt.getKey() === Ext.EventObject.ENTER ) {
                        this._search();
                    }
                },
                afterrender: function(field) {
                    field.focus();
                }
            }
        });
        
        var container = this.down('#selector_container').add({
            xtype:'container', 
            itemId:'selector_container',
            height: 180,
            layout: 'fit'
        });
        
        this.grid = container.add({
            xtype:'rallygrid',
            showRowActionsColumn: false,
            enableEditing: false,
            hideHeaders: true,
            showPagingToolbar: true,
            storeConfig: {
                model:'Project'
            },
            columnCfgs: [{dataIndex:'Name',text:'Click to Add'}],
            listeners: {
                scope: this,
                itemclick: function(grid,record) {
                    this._addRecordToSelectedRecords(record);
                }
            }
        });
    },
    
    _search: function() {
        var terms = this._getSearchTerms();
        console.log('searching for ', terms);
        
        var store = this.grid.getStore();
        store.setFilter(null);
        if (terms) {
            store.setFilter({ property:'Name', operator:'contains', value:terms });
        } 
        store.loadPage(1);
    },

    _getSearchTerms: function() {
        var textBox = this.down('#searchTerms');
        return textBox && textBox.getValue();
    },
        
    _buildTree: function() {
        
        this.tree = Ext.create('Rally.ui.tree.ProjectTree',{
            workspace: Rally.getApp().getContext().getWorkspaceRef(),
            autoScroll: true,
            listeners: {
                scope: this,
                itemselected: function(item) {
                    this._addRecordToSelectedRecords(item.record);
                }
            }
        });
        
        this.down('#grid_container').add(this.tree);
    },
    
    _getGridColumns: function() {
        return [
            { dataIndex: 'Name', flex: 1 }
        ];
    }
});
/*
 * 
 * 
 * PLEASE don't modify this, work on the one here:
 * https://github.com/RallyTechServices/broadcasting-project-picker-apps
 * 
 * 
 * 
 * 
 * 
 */
 
 Ext.define('CA.techservices.picker.MultipleProjectPicker',{
    extend: 'Ext.container.Container',
    alias: 'widget.tsmultiprojectpicker',
    
    margin: 0,
    layout: 'hbox',
    
    items: [
        {xtype:'container',itemId:'buttonBox'}
    ],
    
    config: {
        buttonText: '<span class="icon-shared"></span> +',
        /**
         * 
         * @param Number displayLimit
         * 
         * The number of projects to display after choosing.
         */
        displayLimit: 25, 
        
        selectedRecords: [],
        /**
         * 
         * @param Boolean showProjectNames
         * 
         * if true, show button AND list of chosen project names (up to number of displayLimit)
         */
        showProjectNames: true
    },
    
    getState: function() {
        var me = this,
            state = null,
            sizeModel = me.getSizeModel();

        if (sizeModel.width.configured) {
            state = me.addPropertyToState(state, 'width');
        }
        if (sizeModel.height.configured) {
            state = me.addPropertyToState(state, 'height');
        }
        
        state = me.addPropertyToState(state, 'selectedRecords',  me.selectedRecords);

        return state;
    },
    
//    applyState: function(state) {
//        this.callParent(arguments);
//        if(state.hasOwnProperty('value')) {
//            this.setValue(state.value);
//        }
//        
//        //this.selectedRecords = [];
//        console.log('--applyState', state);
//    },
    
    constructor:function (config) {
        this.mergeConfig(config);

        this.callParent([this.config]);
    },
    
    initComponent: function() {
        this.callParent(arguments);
        this.addEvents(
            /**
             * @event projectschosen
             * Fires when user clicks done after choosing projects
             * @param {CA.techservices.picker.MultipleProjectPicker} this selector
             * @param [{Ext.data.wsapi.model}] projects selected
             */
            'change'
        );
        
        if ( this.showProjectNames ) {
            this.add({   
                xtype:'container',
                itemId:'messageBox', 
                layout:'column',
                autoScroll: true,
                height: 50
            });
        }
        this._displayButton();
        this._updateDisplay();
        this.on('staterestore',this._updateDisplay, this, { single: true } );
    },
    
    _updateDisplay: function() {        
        if ( this.down('#projectSelectorButton') ) {
            var text = this.buttonText;
            if (this.selectedRecords.length > 0 ) {
                text = this.selectedRecords.length + " " + text;
            }
            this.down('#projectSelectorButton').setText(text);
        }
        if ( ! this.showProjectNames ) {
            return;
        }
        
        var sorted_array = Ext.Array.sort(this.selectedRecords, function(a,b) {
            if ( a.Name < b.Name ) { return -1; }
            if ( a.Name > b.Name ) { return 1; }
            return 0;
        });
        
        var container = this.down('#messageBox');
        container.removeAll();
        
        Ext.Array.each(sorted_array, function(record,idx){
            
            if ( idx<this.displayLimit ) {
                container.add({
                    xtype:'button',
                    cls: 'project-button',
                    text: record.Name + " <span class='icon-delete'></span>",
                    listeners: {
                        scope: this, 
                        click: function() {
                            this._removeItem(record);
                        }
                    }
                });
            }
        },this);
        
        if ( this.selectedRecords.length > this.displayLimit ) {
            container.add({
                xtype:'container',
                cls: 'project-button',
                html: '...and others'
            });
        }
    },
    
    _removeItem: function(record) {
        this.selectedRecords = Ext.Array.remove(this.selectedRecords, record);
        this.fireEvent('change', this, this.selectedRecords);
        this._updateDisplay();
    },
    
    getValue: function() {
        return this.selectedRecords || [];
    },
    
    _displayButton: function() {
        this.down('#buttonBox').add({
            xtype:'rallybutton',
            cls: 'secondary',
            itemId:'projectSelectorButton',
            text: this.buttonText,
            toolTipText: 'Add Projects',
            listeners: {
                scope: this,
                click: this._showProjectPicker
            }
        });
    },
    
    _showProjectPicker: function() {
        Ext.create('CA.technicalservices.ProjectPickerDialog',{
            autoShow: true,
            selectedRecords: this.selectedRecords,
            listeners: {
                scope: this,
                projectschosen: function(dialog, selectedRecords) {
                    this.selectedRecords = selectedRecords;
                    this.fireEvent('change', this, this.selectedRecords);
                    this._updateDisplay();
                }
            }
        });
    }
    
});
Ext.override(Rally.ui.picker.MultiObjectPicker,{
    getRightListHtml: function (recordData) {
        
        var format = 'm/d/Y';
        
        var formattedStartDate = Ext.util.Format.date(recordData.StartDate, format);
        var formattedEndDate = Ext.util.Format.date(recordData.EndDate, format);
        
        var return_value = Ext.String.format(" <div class='timebox-dates adjust-right'>{0} - {1}</div>", formattedStartDate, formattedEndDate);
        return return_value;
    },
    
    createStore: function () {
        var deferred = Ext.create('Deft.Deferred');
        
        var storeConfig = Ext.merge({
            model: this.modelType,
           // filters: [{property:'EndDate',operator:'<',value:Rally.util.DateTime.toIsoString(new Date())}]
        }, this.storeConfig);
        
        storeConfig.remoteGroup  = true;
        storeConfig.remoteSort   = true;
        storeConfig.remoteFilter = true;
        

        var interim_store = Ext.create('Rally.data.wsapi.Store',storeConfig);
        
        interim_store.load({ 
            scope: this,
            callback: function(records, operation,success){
                this.store = Ext.create('Rally.data.custom.Store',{
                    data: records,
                    sorters: [{property:'EndDate',direction:'DESC'}]
                });
                
                this.store.load({
                    scope: this,
                    callback: function(records, operation,success){
                        this.relayEvents(this.store, ['datachanged']);
                        
                        deferred.resolve(this.store);                        
                    }
                });

            }
        })

        return deferred.promise;
    }
});
Ext.define('CA.technicalservices.ColumnPickerDialog',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tscolumnpickerdialog',
    
    width: 200,
    closable: true,
    
    config: {
        /**
         * @cfg {String}
         * Title to give to the dialog
         */
        title: 'Choose Columns',
        /**
         * @cfg {Boolean}
         * Allow multiple selection or not
         */
        multiple: true,
        /**
         * 
         * @cfg [{Ext.Column.column}]  columns that
         * can be chosen.  hidden = false means chosen to 
         * show.
         *  
         */
        pickableColumns: [],
        
        selectionButtonText: 'Apply'
        
    },
    
    items: [{
        xtype: 'panel',
        border: false,
        items: [{
            xtype:'container', 
            itemId:'grid_container',
            layout: 'fit',
            height: 325
        }]
    }],

    constructor: function(config) {
        this.mergeConfig(config);

        this.callParent([this.config]);
    },

    initComponent: function() {
        this.callParent(arguments);
        this.addEvents(
            /**
             * @event columnschosen
             * Fires when user clicks done after choosing columns
             * @param {CA.technicalservices.ColumnPickerDialog} this dialog
             * @param [{Ext.column.Column}] columns with hidden marked true/false as appropriate
             */
            'columnschosen'
        );
        
        this._buildButtons();
        //this._buildSearchBar();
        this._buildGrid();
    },
    
    _buildButtons: function() {
        this.down('panel').addDocked({
            xtype: 'toolbar',
            dock: 'bottom',
            padding: '0 0 10 0',
            layout: {
                type: 'hbox',
                pack: 'center'
            },
            ui: 'footer',
            items: [
                {
                    xtype: 'rallybutton',
                    text: this.selectionButtonText,
                    cls: 'primary small',
                    scope: this,
                    userAction: 'clicked done in dialog',
                    handler: function() {
                        var selectedRecords = this.getRecordsWithSelection();
                        this.fireEvent('columnschosen', this, selectedRecords);
                        this.close();
                    }
                },
                {
                    xtype: 'rallybutton',
                    text: 'Cancel',
                    cls: 'secondary small',
                    handler: this.close,
                    scope: this,
                    ui: 'link'
                }
            ]
        });
    },
    
    _buildGrid: function() {
        var mode = this.multiple ? 'MULTI' : 'SINGLE';
        this.selectionModel = Ext.create('Rally.ui.selection.CheckboxModel', {
            mode: mode,
            allowDeselect: true
        });
        
        var pickableColumns = this.pickableColumns;
                
        var store = Ext.create('Rally.data.custom.Store',{
            data: this.pickableColumns,
            pageSize: 500
        });
        
        
        this.grid = Ext.create('Rally.ui.grid.Grid', {
            selModel: this.selectionModel,
            enableColumnHide: false,
            enableColumnMove: false,
            columnCfgs: this._getGridColumns(),
            showPagingToolbar: false,
            showRowActionsColumn: false,
            store: store,
            listeners: {
                viewready: function(grid) {
                    var selectionModel = grid.getSelectionModel();
                    
                    Ext.Array.each(pickableColumns, function(col, idx){
                        if ( !col.hidden ) {
                            selectionModel.select(grid.store.data.items[idx],true);
                        }
                    });
                }
            }
        });
        
        this.down('#grid_container').add(this.grid);
    },
    
    _getGridColumns: function() {
        return [
            { dataIndex: 'text', flex: 1 }
        ];
    },
    
    getRecordsWithSelection: function() {
        var selected_items = this.grid.getSelectionModel().getSelection(); 
        var selected_items_by_dataindex = {};
        Ext.Array.each(selected_items, function(selected_item){
            selected_items_by_dataindex[selected_item.get('text')] = selected_item.getData();
        });
        
        Ext.Array.each(this.pickableColumns, function(pickableColumn){
            pickableColumn.hidden = Ext.isEmpty(selected_items_by_dataindex[pickableColumn.text]);
        });
        
        return this.pickableColumns;
    }
});
Ext.define('CA.technicalservices.ColumnPickerButton',{
    extend: 'Rally.ui.Button',
    requires: [
        'CA.technicalservices.ColumnPickerDialog'
    ],
    
    alias: 'widget.tscolumnpickerbutton',
    
    config: {
        pickableColumns: [],
        text: '<span class="icon-add-column"> </span>',
        cls: 'secondary'

    },
    
    constructor:function (config) {
        this.mergeConfig(config);

        this.callParent([this.config]);
    },
    
    initComponent: function() {
        this.callParent(arguments);
        this.addEvents(
            /**
             * @event columnschosen
             * Fires when user clicks done after choosing columns
             * @param {CA.technicalservices.ColumnPickerButton} this button
             * @param [{Ext.column.Column}] columns with hidden marked true/false as appropriate
             */
            'columnschosen'
        );
    },
    
    afterRender: function() {
        this.callParent(arguments);
        this.mon(this.el, this.clickEvent, this._showDialog, this);

    },
    
    _showDialog: function() {
        var me = this;
        Ext.create('CA.technicalservices.ColumnPickerDialog',{
            autoShow: true,
            pickableColumns: this.pickableColumns,
            listeners: {
                scope: this,
                columnschosen: function(dialog, columns) {
                    this.fireEvent('columnschosen', me, columns);
                }
            }
        });
    }
});
Ext.define("TSEpicIterationReport", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    
    layout:'border',

    integrationHeaders : {
        name : "TSEpicIterationReport"
    },

    pickableColumns: null,
    epicFields: [],
    
    stateful: true,
    stateEvents: ['columnschosen','columnmoved','columnresize'],
    stateId: 'CA.technicalservices.iterationreport.settings',
    
    getState: function() {
        var me = this,
            state = null;

        var columns = Ext.Array.map( this.pickableColumns, function(col){
            var column = Ext.clone(col);
            console.log(col.fieldName, col.hidden);
            column.renderer = null;
            return column;
        });
        
        state = {
            pickableColumns: columns
        };

        return state;
    },
    
    launch: function() {
        this._getEpicFields().then({
            success: function(fields) {
                this.epicFields = fields;
                this._addComponents();
            },
            failure: function(msg) {
                Ext.Msg.alert('',msg);
            },
            scope: this
        });
    },
    
    _addComponents: function(container) {
        this.removeAll();
        
        this.headerContainer = this.add({
            xtype:'container',
            itemId:'header-ct',
            region:'north',
            layout: { type:'hbox' }
        });
        
        this.displayContainer = this.add({
            xtype:'container',
            region:'center',
            layout: 'fit',
            itemId:'body-ct'
        });
        
        if ( this.getSetting('showScopeSelector') || this.getSetting('showScopeSelector') == "true" ) {
            this.headerContainer.add({
                xtype:'tsmultiprojectpicker',
                listeners: {
                    change: function(picker,projects) {
                        this._changeProjects(picker,projects);
                        this._publishProjects();
                    },
                    scope: this
                }
            });
            this.subscribe(this, 'requestProjects', this._publishProjects, this);
        } else {
            this.subscribe(this,'projectsChanged',this._changeProjects,this);
            this.publish('requestProjects',this);
        }
        this._addSelectors(this.headerContainer);
    },
    
    _addSelectors:function(container){
        
        container.add({
            xtype:'tscolumnpickerbutton',
            pickableColumns: this._getPickableColumns(),
            listeners: {
                scope: this,
                columnschosen: function(button,columns) {
                    this.pickableColumns = columns;
                    this.fireEvent('columnschosen');

                    this._updateData();
                }
            }
        });
        
        container.add({
            xtype:'rallymultiobjectpicker',
            modelType:'Iteration',
            fieldLabel: 'Iteration:',
            labelWidth: 55,
            width: 400,
            storeConfig: {
                context: {
                    projectScopeUp: false,
                    projectScopeDown: false
                },
                fetch:['Name','ObjectID','StartDate','EndDate'],
                sorters: [{property:'EndDate',direction:'DESC'}]

            },
            listeners: { 
                scope: this,
                blur: this._updateData
            }
        });
        
        container.add({ xtype:'container', flex: 1});
        
        container.add({
            xtype:'rallybutton',
            itemId:'export_button',
            cls: 'secondary',
            text: '<span class="icon-export"> </span>',
            disabled: true,
            listeners: {
                scope: this,
                click: function() {
                    this._export();
                }
            }
        });
        
    },
    
    _changeProjects: function(picker,projects) {
        this.projects = projects;
        this.displayContainer.removeAll();
        this._updateData();
    },
    
    _publishProjects: function() {
        this.publish('projectsChanged',this.down('tsmultiprojectpicker'), this.projects || []);
    },
    
    _updateData: function() {
        var cb = this.down('rallymultiobjectpicker');
        var iterations = [];
        
        if ( cb ) {
            cb.collapse();
            iterations = cb.getValue();
        }
        
        this.down('#export_button').setDisabled(true);

        if ( iterations.length === 0 ) { return; }
        
        Deft.Chain.pipeline([
            function() { return this._getStoriesInIterations(iterations); },
            this._arrangeRecordsByProjectAndEpic,
            this._makeRows
        ],this).then({
            scope: this,
            success: function(rows) {
                this.display_rows = rows;
                this._makeGrid(rows);
            },
            failure: function(msg) {
                Ext.Msg.alert('Problem Loading Data', msg);
            }
        });
    },
    
    _makeGrid: function(rows) {
        var container = this.displayContainer;
        
        container.removeAll();
        
        var store = Ext.create('Rally.data.custom.Store',{
            data: rows,
            groupField: 'Iteration'
        });
        
        container.add({
            xtype:'rallygrid',
            store: store,
            columnCfgs: this._getColumns(),
            showRowActionsColumn: false,
            features: [{
                ftype: 'groupingsummary',
                groupHeaderTpl: '{groupValue}'
            }]
        });
        
        this.down('#export_button').setDisabled(false);
    },
    
    _getColumns: function() {
        var columns = Ext.Array.merge([], this._getBaseLeftColumns());
        
        columns = Ext.Array.merge(columns, this._getPickableColumns());
        
        columns = Ext.Array.merge(columns, this._getBaseRightColumns());

        return columns;
    },
    
    _makeRows: function(records_by_iteration_by_project) {
        this.logger.log('records_by_iteration_by_project',records_by_iteration_by_project);

        var rows = [];
        //Get total of PlanEstimates for all projects so that we can find the % for each row. 
        Ext.Object.each(records_by_iteration_by_project, function(iteration_name,hash){
            var epic_plan_est_total = 0;
            Ext.Object.each(hash, function(project_oid, project_set){
                Ext.Object.each(project_set.records, function(epic_oid, epic_set){
                    var plan_estimates = Ext.Array.map(epic_set.records, function(record){
                        var size = record.get('PlanEstimate') || 0;
                        return 1000 * size;
                    });
                    epic_plan_est_total += Ext.Array.sum(plan_estimates);
                });
            });
        
            Ext.Object.each(hash, function(project_oid, project_set){
                var project = project_set.project;
                Ext.Object.each(project_set.records, function(epic_oid, epic_set){
                    var epic = epic_set.epic;

                    var plan_estimates = Ext.Array.map(epic_set.records, function(record){
                        var size = record.get('PlanEstimate') || 0;
                        return 1000 * size;
                    });
                 
                    var epic_percentage = 100 * Ext.Array.sum(plan_estimates) / epic_plan_est_total;
                    
                    var row = {
                        Project: project,
                        ProjectName: project.Name,
                        Epic: epic,
                        EpicName: epic.Name,
                        EpicOID: epic_oid,
                        EpicState: epic.State && epic.State._refObjectName,
                        Records: epic_set.records,
                        PlanEstimate: Ext.Array.sum(plan_estimates) / 1000,
                        EpicPercentage: epic_percentage,
                        c_ExtID01TPR: epic.c_ExtID01TPR,
                        Iteration: iteration_name
                    };
                    
                    rows.push(row);
                });
            });
        });
        return rows;
    },
    
    _arrangeRecordsByProjectAndEpic: function(records) {
        this.logger.log('_arrangeRecordsByProjectAndEpic',records);
        
        var records_by_iteration = {};
        
        Ext.Array.each(records, function(record){
            records_by_iteration = Ext.Object.merge(records_by_iteration, record);
        });
        
        this.logger.log('records_by_iteration',records_by_iteration);
        
        var records_by_iteration_by_project = {};

        Ext.Object.each(records_by_iteration, function(iteration_name, iteration_records){
            var records_by_project = {};

            Ext.Array.each(iteration_records, function(record){
                var project = record.get('Project');
                var epic = { FormattedID:"", Name:"None", ObjectID:-1 };
                var feature = record.get('Feature');
                
                if ( !Ext.isEmpty(feature) && !Ext.isEmpty(feature.Parent) ) {
                    epic = feature.Parent;
                }
                
                var project_oid = project.ObjectID;
                var epic_oid = epic.ObjectID;
                
                if ( Ext.isEmpty(records_by_project[project_oid]) ) {
                    records_by_project[project_oid] = {
                        project: project,
                        records: {}
                    };
                }
                
                if ( Ext.isEmpty( records_by_project[project_oid]['records'][epic_oid] )) {
                    records_by_project[project_oid]['records'][epic_oid] = {
                        epic: epic,
                        records:[]
                    };
                }
                records_by_project[project_oid]['records'][epic_oid].records.push(record);
            });
            records_by_iteration_by_project[iteration_name] = records_by_project;
        });
        

        return records_by_iteration_by_project;
    },
    
    _getStoriesInIterations: function(iterations) {
        var me = this;
        var project_oids = [];
        if ( !Ext.isEmpty(this.projects) && this.projects.length > 0 ) {
            project_oids = Ext.Array.map(this.projects, function(project){
                return project.ObjectID;
            });
        }
        
        var promises = Ext.Array.map(iterations, function(iteration){
            return function() { return me._getStoriesInIteration(iteration,project_oids); }
        });
        
        return Deft.Chain.sequence(promises, this);
    },
    
    _getFetchFields: function() {
        var fields = ['FormattedID','Name','PlanEstimate','Project',
            'Feature','Parent','ObjectID','c_ExtID01TPR',
            'LeafStoryPlanEstimateTotal','State','Iteration'];
        Ext.Array.each(this._getPickableColumns(), function(column) {
            if ( !column.hidden ) {
                fields.push(column.fieldName);
            }
        });
        
        return fields;
    },
    
    _getStoriesInIteration: function(iteration,project_oids) {
        this.logger.log('_getStoriesInIteration', iteration);
        var deferred = Ext.create('Deft.Deferred');
        
        var iteration_filters = Rally.data.wsapi.Filter.and(
            [{property:'Iteration.Name',value:iteration.get('Name')}]
        );
        
        var project_filters = Rally.data.wsapi.Filter.or(
            Ext.Array.map(project_oids,function(oid){
                return {property:'Project.ObjectID',value:oid};
            })
        );
        
        var config = {
            model:'HierarchicalRequirement',
            fetch: this._getFetchFields(),
            limit: Infinity
        };
        
        if ( Ext.isEmpty(project_oids) || project_oids.length === 0 ) {
            config.filters = iteration_filters;
        } else {
            config.context = { project: null };
            config.filters = iteration_filters.and(project_filters);
        }
        
        this._loadWsapiRecords(config).then({
            success: function(stories) {
                var response = {};
                response[iteration.get('Name')] = stories;
                deferred.resolve(response);
            },
            failure: function(msg) {
                deferred.reject(msg);
            },
            scope: this
        });
        return deferred.promise;
    },
      
    _loadWsapiRecords: function(config){
        var deferred = Ext.create('Deft.Deferred'),
            me = this;
            
        var default_config = {
            model: 'Defect',
            fetch: ['ObjectID'],
            compact: false
        };

        me.setLoading('Loading ' + config.model + '...');
        
        this.logger.log("Starting load:",config.model);
        Ext.create('Rally.data.wsapi.Store', Ext.Object.merge(default_config,config)).load({
            callback : function(records, operation, successful) {
                if (successful){
                    deferred.resolve(records);
                } else {
                    me.logger.log("Failed: ", operation);
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
                
                me.setLoading(false);
            }
        });
        return deferred.promise;
    },
    
    _export: function(){
        var me = this;
        this.logger.log('_export');
        
        var grid = this.down('rallygrid');
        var rows = this.display_rows;
        
        
        this.logger.log('number of rows:', rows.length);
        
        if ( !grid && !rows ) { return; }
        
        var filename = 'epic-iteration-report.csv';

        this.logger.log('saving file:', filename);
        
        this.setLoading("Generating CSV");
        Deft.Chain.sequence([
            function() { return Rally.technicalservices.FileUtilities.getCSVFromRows(this,grid,rows); } 
        ]).then({
            scope: this,
            success: function(csv){
                this.logger.log('got back csv ', csv.length);
                if (csv && csv.length > 0){
                    Rally.technicalservices.FileUtilities.saveCSVToFile(csv,filename);
                } else {
                    Rally.ui.notify.Notifier.showWarning({message: 'No data to export'});
                }
                
            }
        }).always(function() { me.setLoading(false); });
    },
    
    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },
    
    getSettingsFields: function() {
        var check_box_margins = '0 0 10 10';
        
        var type_filters = Rally.data.wsapi.Filter.or([
            {property: 'TypePath', value: 'HierarchicalRequirement'},
            {property: 'TypePath', operator: 'contains', value: 'PortfolioItem/'}
        ]);

        return [{
            name: 'showScopeSelector',
            xtype: 'rallycheckboxfield',
            boxLabelAlign: 'after',
            fieldLabel: '',
            margin: check_box_margins,
            boxLabel: 'Show Project Selector'
        },{
            name: 'showEpicPercentage',
            xtype: 'rallycheckboxfield',
            boxLabelAlign: 'after',
            fieldLabel: '',
            margin: check_box_margins,
            boxLabel: 'Show percentage of story points for epic are in the sprint'
        }];
    },
    
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },
    
    //onSettingsUpdate:  Override
    onSettingsUpdate: function (settings){
        this.logger.log('onSettingsUpdate',settings);
        // Ext.apply(this, settings);
        this.launch();
    },
    
    _setPickableColumns: function(pickable_columns) {
        var columns = Ext.Array.merge([], this._getBaseLeftColumns());
        columns = Ext.Array.merge(columns, pickable_columns);
        columns = Ext.Array.merge(columns, this._getBaseRightColumns());
    },
    
    _getBaseLeftColumns:function() {
        var columns = [];
        
        columns.push({ dataIndex:'ProjectName',  text:'Project' });
        
        columns.push({ dataIndex:'EpicOID', text:'Epic', flex: 1, renderer: function(value, meta, record) {
            if ( value == -1 ) { return ""; }
            return Ext.String.format("{0}: {1}", 
                record.get('Epic').FormattedID,
                record.get('Epic').Name
            );
        }});
        
        return columns;
    },
    
    _getBaseRightColumns: function() {
        var columns = [];
        
        columns.push({dataIndex:'PlanEstimate', text:'Sum of Estimates'});
        
        if ( this.getSetting('showEpicPercentage') ) {
            columns.push({dataIndex:'EpicPercentage', text: 'Epic %', renderer: function(value, meta, record){
                if ( !Ext.isNumber(value) || value < 0 ) { return "N/A"; }
                return Ext.util.Format.number(value, '0.##') + "%";
            }});
        }
        columns.push({dataIndex:'c_ExtID01TPR', text:'ExtID: 01 - TPR'});
        
        columns.push({dataIndex:'Iteration',text:'Iteration'});
        return columns;
    },
    
    _getPickableColumns: function() {
        var columns = [],
            me = this;
                
        if ( ! this.epicFields ) { return columns; }
        
        columns = Ext.Array.map(this.epicFields, function(field){            
            return {
                hidden: true,
                dataIndex: 'Epic',
                text:      field.displayName,
                fieldName: field.name,
                renderer: function(value,meta,record) {
                    if ( Ext.isEmpty(value) || Ext.isEmpty(value[field.name]) ) {
                        return "";
                    }
                    if ( Ext.isObject(value[field.name]) ) {
                        return value[field.name]._refObjectName;
                    }
                    return value[field.name];
                }
            };
        });
     
        if ( ! this.pickableColumns ) { return columns; }

        var pickable_by_index = {};
        Ext.Array.each(this.pickableColumns, function(column){
            pickable_by_index[column.fieldName] = column;
        });
        
        return Ext.Array.map(columns, function(column){
            var pickable = pickable_by_index[column.fieldName];
            if ( Ext.isEmpty(pickable) ) { return column; }
            
            if ( pickable.hidden ) { 
                column.hidden = true;
            } else {
                column.hidden = false;
            }
            
            return column;
            
        });
    },
    
    _getEpicFields: function() {
        var deferred = Ext.create('Deft.Deferred');
        Rally.data.ModelFactory.getModel({
            type: 'PortfolioItem',
            success: function(model) {
                var field_list = [];
                var fields_to_skip = ["ObjectID","ObjectUUID","VersionId","DragAndDropRank","FormattedID","Name"];
               
                Ext.Array.each( model.getFields(), function(field) {
                    if ( field.hidden ) { 
                        return;
                    }
                    
                    if ( Ext.Array.contains(fields_to_skip,field.name) ) {
                        return;
                    }
                    
                    if ( field.attributeDefinition ) {
                        if ( field.attributeDefinition.AttributeType == "COLLECTION" ||  field.attributeDefinition.AttributeType == "TEXT") {
                            return ;
                        }
                    }
                    field_list.push( field );
                });

                field_list = Ext.Array.sort(field_list, function(a,b){
                    if ( a.DisplayName < b.DisplayName ) { return 1; }
                    if ( a.DisplayName > b.DisplayName ) { return -1; }
                    return 0;    
                });
                deferred.resolve(field_list);
            }
        });
        return deferred.promise;
    }
    
});

            
               Rally.launchApp('TSEpicIterationReport', {
                   name: 'Epic Iteration Report'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}

.adjust-right {
    float: right;
    padding-left: 2px;
    padding-right: 5px;
}

.x-border-layout-ct {
    background-color: #ffffff;
}
.project-box {
    font: 9px arial, sans-serif !important;
    background-color: #D3D3D3;
    color: black;
    border: 1px solid black;
    padding: 3px;
    margin: 3px;
}

.project-button {
    font: 9px arial, sans-serif !important;
    background-color: #fff;
    color: black;
    border: none;
    padding: 3px;
}

.project-button.x-btn-default-small .x-btn-inner {
    font: 9px arial, sans-serif !important;
    color: black;
}
    </style>

</head>
<body></body>
</html>